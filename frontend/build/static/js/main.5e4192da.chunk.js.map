{"version":3,"sources":["Components/Client/ItemCard.js","Components/Client/CardsGallery.js","Components/Client/HomePage.js","Components/Client/NavbarComponent.js","Components/Client/AboutComponent.js","Components/Client/HeaderComponent.js","Components/Client/ItemPageComponent.js","Components/Client/Main.js","Components/Admin/LoginPage.js","Components/Admin/AddItemCardForm.js","Components/Admin/AdminItemCard.js","Components/Admin/AdminCardsGallery.js","Components/Admin/AddCardItemModel.js","Components/Admin/AdminPage.js","Components/Admin/MainAdmin.js","Components/Client/App.js","serviceWorker.js","index.js"],"names":["ItemCard","history","allItemValue","type","name","description","id","in_stock","_id","url","console","log","openItem","push","getDescription","length","slice","Card","body","outline","color","Row","Col","xs","CardImg","onClick","left","className","src","alt","CardBody","CardTitle","CardText","Button","size","CardsGallery","viewType","items","random","Math","getRow","arr","key","map","el","getCards","colNumber","rowsArray","itemsSelected","i","lastRow","HomePage","props","useState","setItems","setViewType","useEffect","a","fetch","method","headers","response","json","data","products","fetchData","Container","ButtonGroup","NavbarComponent","Navbar","light","expand","Nav","navbar","NavItem","NavLink","href","AboutComponent","HeaderComponent","ItemPageComponent","item","setItem","match","params","withRouter","useRouteMatch","path","exact","component","LoginPage","username","setUsername","password","setPassword","alert","setAlert","useCookies","login","encode","btoa","credentials","error","onLogIn","md","offset","Input","placeholder","onChange","e","target","value","Alert","AdditemCardForm","initDescription","initName","initInStock","onSubmit","setDescription","setName","setInStock","image","setImage","Form","FormGroup","row","Label","for","sm","preventDefault","files","check","checked","submit","onDelete","onSubmitEdit","showForm","setShowForm","onEdit","class","AddItemCardForm","AdminCardsGallery","AdminItemCard","AddCarditemModel","modal","setModal","toggle","Modal","isOpen","ModalHeader","ModalBody","AdminPage","reload","setReload","deleteItem","editItem","formData","FormData","append","postItem","onLogOut","AddCardItemModel","MainAdmin","cookies","removeCookie","user","window","location","App","CookiesProvider","Main","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e4192da.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card, CardImg, CardText, CardBody,\n  CardTitle, Button, ButtonToggle, Row, Col, CardImgOverlay,\n  NavLink\n} from 'reactstrap';\n\nconst ItemCard = ({history, allItemValue, type}) => {\n\n    let name = allItemValue.name || 'Name is unavailable'\n    let description = allItemValue.description || 'Description is unavailable'\n    let in_stock = allItemValue.in_stock || 'In_stock is unavailable'\n    let id = allItemValue._id || -1\n\n    let url = './img/' + id + '.png'\n\n    console.log('id of AllItemValue: ', id)\n\n    let openItem = () => {\n      history.push(`/${id}`)\n    }\n\n    let getDescription = () => {\n      if (description.length > 100) {\n        return description.slice(0, 97) + '...'\n      } else\n        return description\n    }\n\n    if (!type || type === 0) {\n    return (\n      <Card>\n        <CardImg onClick={openItem} left className=\"header-img\" src={url} alt=\"image\" />\n        <CardBody>\n          <CardTitle onClick={openItem}> {name} </CardTitle>\n          <CardText> {getDescription()} </CardText>\n          <Button> BUTTON </Button>\n        </CardBody>\n      </Card>\n    )} else {\n      return (\n        <Card body outline color=\"success\">\n          <Row>\n            <Col xs=\"4\">\n              <CardImg onClick={openItem} left className=\"header-img\" src={url} alt=\"image\" />\n            </Col>\n            <Col xs=\"6\">\n              <CardBody>\n                <CardTitle onClick={openItem} className=\"link\"> \n                    {name}\n                </CardTitle>\n                <CardText> {getDescription()} </CardText>\n                <Button outline color=\"success\" size=\"lg\"> BUTTON </Button>\n              </CardBody>\n            </Col>\n          </Row>\n        </Card>\n      )\n    }\n  };\n\nItemCard.propTypes = {\n    type: PropTypes.number,\n    title: PropTypes.string,\n    content: PropTypes.string\n}\n\nexport default ItemCard;\n\n/*<div class=\"card flex-row flex-wrap\">\n          <div class=\"card-header border-0\">\n              <img onClick={openItem} className=\"header-img\" src={url} alt=\"image\"/>\n          </div>\n          <div class=\"card-block px-2\">\n              <CardTitle onClick={openItem}> {name} </CardTitle>\n              <CardText> {description} </CardText>\n              <Button>BUTTON</Button>\n          </div>\n        </div>*/","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ItemCard from './ItemCard';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst CardsGallery = ({history, viewType, items}) => {\n\n    const random = () => {\n        return Math.random(10000);\n    }\n\n    const getRow = (arr = []) => {\n\n        return (\n            <Row key={random()}>\n                {arr.map(el => {\n                    if (!el.name) {\n                        return <Col></Col>\n                    } \n                    return <Col className=\"card-col\" xs={`${12/arr.length}`}><ItemCard history={history} key={random()} allItemValue={el}/></Col>\n                })}\n            </Row>\n        )\n    }\n\n    const getCards = (colNumber = 2) => {\n        if (colNumber >= 2 && items.length >= 2) {\n\n            let rowsArray = [];\n            let itemsSelected = 0;\n\n            for (let i = 0; i <= items.length - colNumber; i += colNumber) {\n                let arr = items.slice(i, i + colNumber);\n                rowsArray.push(getRow(arr));\n                console.log(rowsArray)\n                itemsSelected += colNumber;\n            }\n\n            if (items.length % colNumber !== 0) {\n\n                let lastRow = items.slice(itemsSelected, items.length);\n\n                while (lastRow.length < items.length - 1) {\n                    lastRow.push({});\n                }\n\n                rowsArray.push(getRow(lastRow));\n            }\n\n            return rowsArray;\n        } else {\n            return items.map(el => <Col className=\"card-col\" ><ItemCard history={history} key={random()} type={1} allItemValue={el}/></Col>)\n        }\n    }\n\n    const getGallery = () => {\n        if (viewType === 0) {\n            return getCards(3);\n        } else {\n            return getCards(1);\n        }\n    } \n\n    return (\n        <div>\n            {getGallery()}\n        </div>\n    );\n}\n\nCardsGallery.propTypes = {\n    viewType: PropTypes.number,\n    content: PropTypes.string,\n}\n\nexport default CardsGallery;","import React, { useState, useEffect } from 'react';\nimport CardsGallery from './CardsGallery';\nimport { Button, ButtonGroup, Container, Row } from 'reactstrap';\n\nconst HomePage = (props) => {\n\n    const [items, setItems] = useState([]);\n    const [viewType, setViewType] = useState(0);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            let response = await fetch('/api/products', {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                }\n            })\n\n            try {\n                let data = await response.json()\n                console.log(data.products)\n\n                setItems(data.products)\n            } catch (ex) {\n                console.log('error: ', ex)\n            }\n        }\n\n        fetchData()\n    }, []);\n\n    return (\n        <Container>\n            <Row>\n                <ButtonGroup className=\"ml-auto\">\n                    <Button color=\"primary\" outline color=\"success\" onClick={() => setViewType(0)} active={viewType === 0}>\n                        <img src=\"./icons/square-menu.png\"></img>\n                    </Button>\n                    <Button color=\"primary\" outline color=\"success\" onClick={() => setViewType(1)} active={viewType === 1}>\n                        <img src=\"./icons/list-menu.png\"></img>\n                    </Button>\n                </ButtonGroup>\n            </Row>\n            <Row>\n                <CardsGallery {...props} viewType={viewType} items={items}/>\n            </Row>\n        </Container>\n    );\n}\n\nexport default HomePage;","import React, { Component } from 'react';\nimport {\n    Navbar, \n    NavbarBrand, \n    Nav,\n    NavItem,\n    NavLink\n} from 'reactstrap';\n\nconst NavbarComponent = (props) => {\n    return (\n        <div>\n            <Navbar color=\"light\" light expand=\"md\">\n                <Nav className=\"mr-auto\" navbar>\n                    <NavItem>\n                        <NavLink className=\"nav-link-header\" href=\"/\">Home</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink className=\"nav-link-header\" href=\"/about\">About</NavLink>\n                    </NavItem>\n                </Nav>\n            </Navbar>\n        </div>\n    );\n}\n\nexport default NavbarComponent;","import React, { Component } from 'react';\n\nconst AboutComponent = (props) => {\n\n    console.log(props)\n\n    return (\n        <div>\n            <h1>About</h1>\n        </div>\n    );\n}\n\nexport default AboutComponent;","import React, { Component } from 'react';\n\nconst HeaderComponent = (props) => {\n    return (\n        <div>\n            <img className=\"header-img\" alt=\"Image of Seal\" src=\"../img/1ycO6.jpg\"></img>\n        </div>\n    );\n}\n\nexport default HeaderComponent;","import React, { useState, useEffect } from 'react';\nimport CardsGallery from './CardsGallery';\nimport { Button, ButtonGroup, Container, Row, Col } from 'reactstrap';\n\nconst ItemPageComponent = (props) => {\n\n    const [item, setItem] = useState({})\n\n    console.log(props.match)\n\n    useEffect(() => {\n\n        console.log(props)\n\n        const fetchData = async () => {\n            let response = await fetch(`/api/products/${props.match.params.id}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                }\n            })\n\n            try {\n                let data = await response.json()\n\n                setItem(data.products)\n            } catch (ex) {\n                console.log('error: ', ex)\n            }\n        }\n\n        fetchData()\n    }, []);\n\n    const {name, description, in_stock, id} = item\n\n    return (\n\n        <Container>\n            <Row>\n                <Col>\n                    <h1>{name}</h1>\n                    <h1>{description}</h1>\n                    <h1>{in_stock}</h1>\n                    <h1>{id}</h1>\n                </Col>\n            </Row>\n        </Container>\n    );\n\n    return (<h1>1</h1>)\n}\n\nexport default ItemPageComponent;","import React, { Component } from 'react'\nimport { Switch, Route, Redirect, BrowserRouter, withRouter, useRouteMatch } from 'react-router-dom'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\nimport HomePage from './HomePage'\nimport Navbar from './NavbarComponent'\nimport Footer from './FooterComponent'\nimport AboutComponent from './AboutComponent'\nimport Header from './HeaderComponent'\nimport ItemPageComponent from './ItemPageComponent' \n\nconst Main = (props) => {\n\n    let { path, url } = useRouteMatch();\n\n    console.log(props)\n\n    return (\n        <>\n        \n            <Header />\n            <Navbar />   \n\n            <Switch>\n                <Route exact path={path} component={HomePage}/>\n                <Route path=\"/about\" component={AboutComponent}/>\n                <Route path=\"/:id\" component={ItemPageComponent}/>\n            </Switch>\n        </>\n    );\n}\n\nexport default withRouter(Main);","import React, { Component, useState } from 'react'\nimport { InputGroup, InputGroupAddon, InputGroupText, Input, Container, Row, Col, Alert, Button } from 'reactstrap'\nimport { useCookies } from 'react-cookie'\n\nconst LoginPage = (props) => {\n\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [alert, setAlert] = useState(0)\n    const [cookies, setCookie, removeCookie] = useCookies('')\n\n\n    const login = async () => {\n\n        let encode = btoa(`${username}:${password}`)\n\n        let response = await fetch('/api/login', {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Basic ${encode}`\n            }\n        })\n\n        try {\n            let data = await response.json()\n            if (!data.error) {\n                props.onLogIn()\n                setAlert(0)\n            } else {\n                setAlert(1)\n            }\n        } catch (ex) {\n            setAlert(1)\n        }\n    }\n\n    return (\n        <div>\n            <Container>\n                <Row>\n                    <Col md={{ size: 6, offset: 4 }}>\n                        <h1>Log in to AdminPage</h1>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={{ size: 3, offset: 4 }}>\n                        <Input placeholder=\"username\" onChange={e => setUsername(e.target.value)}/>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={{ size: 3, offset: 4 }}>\n                        <Input placeholder=\"password\" onChange={e => setPassword(e.target.value)}/>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={{ size: 3, offset: 4 }}>\n                        <Button onClick={login}>Log in</Button>\n                    </Col>\n                </Row>\n                {alert === 1 ? \n                <Row>\n                    <Col md={{ size: 3, offset: 4 }}>\n                        <Alert color=\"danger\">\n                            LogIn unsuccessful\n                        </Alert> \n                    </Col>\n                </Row> : null}\n                \n            </Container>\n        </div>\n    );\n}\n\nexport default LoginPage;","import React, { useState } from 'react';\nimport { Button, Form, FormGroup, Label, Input, FormText, Col } from 'reactstrap';\n\nconst AdditemCardForm = ({initDescription = '', initName = '', initInStock = true, onSubmit}) => {\n\n    const [description, setDescription] = useState(initDescription)\n    const [name, setName] = useState(initName)\n    const [in_stock, setInStock] = useState(initInStock)\n    const [image, setImage] = useState('')\n\n    const submit = () => {\n        let item = {\n            name,\n            description,\n            in_stock\n        }\n\n        if (image !== '')\n            item.image = image\n\n        onSubmit(item);\n    }\n\n    return (\n        <Form>\n            <FormGroup row>\n                <Label for=\"file-id\" sm={2}>File</Label>\n                <Col sm={10}>\n                    <Input type=\"file\" name=\"file\" id=\"file-id\" onChange={(e) => {e.preventDefault(); setImage(e.target.files[0])}}/>\n                </Col>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"name-id\">Name</Label>\n                <Input type=\"text\" name=\"name\" id=\"name-id\" placeholder=\"enter a name\" value={name} onChange={(e) => setName(e.target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"description-id\">Description</Label>\n                <Input type=\"textarea\" name=\"description\" id=\"description-id\" className='form-textarea' value={description} onChange={(e) => setDescription(e.target.value)}/>\n            </FormGroup>\n            <FormGroup check>\n                <Label check>\n                <Input type=\"checkbox\" checked={in_stock} onChange={() => setInStock(!in_stock)}/>{' '}\n                    In stock\n                </Label>\n            </FormGroup>\n            <Button type=\"button\" onClick={(e) => {e.preventDefault(); submit()}}>Submit</Button>\n        </Form>\n    );\n}\n\nexport default AdditemCardForm;","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Card, CardImg, CardText, CardBody,\n  CardTitle, Button, ButtonToggle\n} from 'reactstrap'\nimport AddItemCardForm from './AddItemCardForm'\n\nconst ItemCard = ({allItemValue, onDelete, onSubmitEdit}) => {\n\n    let name = allItemValue.name || 'Name is unavailable'\n    let description = allItemValue.description || 'Description is unavailable'\n    let in_stock = allItemValue.in_stock || 'In_stock is unavailable'\n    let id = allItemValue._id || -1\n\n    let url = './img/' + id + '.png'\n    console.log(\"url:\", url)\n\n    const edit = () => {\n        if (id !== -1) {\n            let item = {name, description, in_stock, id}\n\n            console.log('item: ', item)\n\n            onEdit(item)\n        } else {\n            console.log('AdminItemCard id is unavailable')\n        }\n    }\n\n    const [showForm, setShowForm] = useState(false)\n\n    const onSumbitForm = (item) => {\n        item.id = id\n        onSubmitEdit(item)\n    } \n\n    const onEdit = () => {\n        setShowForm(!showForm)\n    }\n\n    return (\n        <div class=\"card flex-row flex-wrap\">\n            <div class=\"card-header border-0\">\n                <img className=\"header-img\" src={url} alt=\"image\"/>\n            </div>\n            <div class=\"card-block px-2\">\n                <CardTitle> {name} </CardTitle>\n                <CardText> {description} </CardText>\n                <Button onClick={() => onDelete(id)}>X</Button>\n                <Button onClick={onEdit}>Edit</Button>\n                {showForm === true ? \n                    <AddItemCardForm initDescription={description} initName={name} initInStock={in_stock} onSubmit={onSumbitForm}/> \n                : null}\n            </div>\n        </div>\n    )\n  \n};\n\nItemCard.propTypes = {\n    onDelete: PropTypes.func,\n    onEdit: PropTypes.func\n}\n\nexport default ItemCard;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport AdminItemCard from './AdminItemCard';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst AdminCardsGallery = ({items, onDelete, onSubmitEdit}) => {\n\n    const random = () => {\n        return Math.random(10000);\n    }\n\n    const getCards = () => {\n        return items.map(el => <Col><AdminItemCard key={random()} onDelete={onDelete} onSubmitEdit={onSubmitEdit} allItemValue={el}/></Col>)\n    }\n\n    const getGallery = () => {\n        return getCards(1);\n    } \n\n    return (\n        <div>\n            {getGallery()}\n        </div>\n    );\n}\n\nAdminCardsGallery.propTypes = {\n    onDelete: PropTypes.func,\n    onEdit: PropTypes.func\n}\n\nexport default AdminCardsGallery;","import React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\nimport AddCarditemForm from './AddItemCardForm'\n\nconst AddCarditemModel = ({onSubmit}) => {\n\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setModal(!modal);\n\n  /*let submit = (item) => {\n    let itemToSubmit = {\n        'desc': item.desc, \n        'title': item.title,\n        'checked': item.checked\n    }\n\n    onSubmit(item);\n    toggle();\n  }*/\n\n  return (\n    <div>\n        <Button color=\"info\" onClick={toggle}>Add</Button>\n        <Modal isOpen={modal} toggle={toggle}>\n            <ModalHeader toggle={toggle}>Add item</ModalHeader>\n            <ModalBody>\n                <AddCarditemForm onSubmit={(item) => {onSubmit(item); toggle()}}/>\n            </ModalBody>\n        </Modal>\n    </div>\n);\n}\n\nexport default AddCarditemModel;","import React, { Component, useState, useEffect } from 'react'\nimport {Button, Container, Row, Col} from 'reactstrap'\nimport AdminCardsGallery from './AdminCardsGallery'\nimport AddCardItemModel from './AddCardItemModel'\n\nconst AdminPage = (props) => {\n\n    const [items, setItems] = useState([])\n    const [reload, setReload] = useState(false)\n\n    useEffect(() => {\n        const fetchData = async () => {\n            let response = await fetch('/api/products', {\n                method: 'GET',\n                credentials: 'include',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                }\n            })\n\n            try {\n                let data = await response.json()\n                console.log(data.products)\n\n                setItems(data.products)\n            } catch (ex) {\n                console.log('error: ', ex)\n            }\n        }\n\n        fetchData()\n    }, [reload])\n\n    let logout = () => {\n        props.onLogOut();\n    }\n\n    let deleteItem = async (id) => {\n        let response = await fetch(`/api/products/${id}`, {\n            method: 'DELETE',\n            credentials: 'include',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            }\n        })\n\n        try {\n            let data = await response.json()\n            setReload(!reload)\n        } catch (ex) {\n\n        }\n    }\n\n    let editItem = async (item) => {\n\n        let formData = new FormData()\n\n        formData.append('name', item.name)\n        formData.append('description', item.description)\n        formData.append('in_stock', item.in_stock)\n        if (item.image) {\n            formData.append('image', item.image)\n        }\n\n        let response = await fetch(`/api/products/${item.id}`, {\n            method: 'PUT',\n            credentials: 'include',\n            headers: {\n                'Accept': 'application/json',\n                //'Content-Type': 'multipart/form-data',\n            },\n            body: formData\n        })\n\n        try {\n            let data = await response.json()\n\n            console.log('data: ', data)\n\n            setReload(!reload)\n        } catch (ex) {\n\n        }\n    }\n\n    let postItem = async (item) => {\n\n        let formData = new FormData()\n\n        formData.append('name', item.name)\n        formData.append('description', item.description)\n        formData.append('in_stock', item.in_stock)\n\n        if (item.image) {\n            formData.append('image', item.image)\n        }\n\n        let response = await fetch(`/api/products/`, {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                'Accept': 'application/json',\n                //'Content-Type': 'application/json',\n            },\n            body: formData\n        })\n\n        try {\n            let data = await response.json()\n            setReload(!reload)\n        } catch (ex) {\n\n        }\n    } \n\n    return (\n        <>\n            <Container>\n                <Row>\n                    <Col>\n                        <h1>Hello from admin</h1>\n                    </Col>\n                    <Col>\n                        <Button onClick={logout}>Log out</Button>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <AddCardItemModel onSubmit={(item) => postItem(item)}/>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <AdminCardsGallery onDelete={deleteItem} onSubmitEdit={editItem} items={items} />\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    );\n}\n\nexport default AdminPage;","import React, { Component, useState, useEffect } from 'react'\nimport LoginPage from './LoginPage'\nimport AdminPage from './AdminPage'\nimport { useCookies } from 'react-cookie'\n\nconst MainAdmin = ({history}) => {\n\n    const [reload, setReload] = useState(false)\n    const [cookies, setCookie, removeCookie] = useCookies('')\n\n    const onLogIn = () => {\n        window.location.reload(); \n    } \n\n    const onLogOut = () => {\n        removeCookie('user')\n        window.location.reload(); \n    } \n\n    return (\n        <div>\n            {cookies.user ? \n                <AdminPage onLogOut={onLogOut}/>\n            : <LoginPage onLogIn={onLogIn}/>}\n            \n        </div>\n    );\n}\n\nexport default MainAdmin;","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Main from './Main'\nimport MainAdmin from '../Admin/MainAdmin'\nimport AboutComponent from './AboutComponent'\nimport { CookiesProvider } from 'react-cookie'\n\nconst App = () => {\n  return (\n    <CookiesProvider>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/admin\" component={MainAdmin}/>\n          <Route path=\"/\" component={Main}/>\n        </Switch>\n      </BrowserRouter>\n    </CookiesProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/Client/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}